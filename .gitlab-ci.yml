# Define stages
stages:
  - publish

# Define global workflow rules
workflow:
  rules:
    # Run pipeline for tags
    - if: "$CI_COMMIT_TAG"

# Define variables
variables:
  # required node and yarn versions
  NODE_VERSION: "20"
  YARN_VERSION: "1.22.22"
  # cache for yarn and npm
  YARN_CACHE_FOLDER: "$CI_PROJECT_DIR/.yarn-cache"
  # ANSI Style codes for terminal output
  ANSI_BOLD_ITALIC_CODE: "\x1b[1;3m"
  ANSI_RESET_CODE: "\x1b[0m"

# Cache configuration
cache:
  # The cache key is generated based on the yarn.lock file
  # When yarn.lock changes, a new cache is created
  key:
    files:
      - yarn.lock
  # Cache the node_modules directory to speed up builds
  # This prevents downloading dependencies on every pipeline run
  paths:
    - .yarn-cache/
    - node_modules/
  # pull-push policy:
  # - 'pull': tries to download cache before job execution
  # - 'push': uploads new cache after job completion
  # This ensures cache is both retrieved and updated
  policy: pull-push

# Default image
default:
  image: node:${NODE_VERSION}
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Publish package to npm registry
publish_package:
  stage: publish
  before_script:
    - |
      if ! command -v yarn &> /dev/null; then
        npm install -g yarn@${YARN_VERSION}
      else
        echo -e "${ANSI_BOLD_ITALIC_CODE}Yarn is already installed${ANSI_RESET_CODE}"
      fi
    - yarn --version
    - yarn config set network-timeout 300000
    - yarn config set cache-folder ${YARN_CACHE_FOLDER}
    # Set registry explicitly to npm
    - yarn config set registry https://registry.npmjs.org/
    # Configure NPM authentication
    - echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > .npmrc
  script:
    # Check package version against tag version
    - node ci-helpers/publish/verify-package-version.js
    - yarn install --frozen-lockfile --prefer-offline
    - yarn run build
    # Publish without creating git tag since we're in CI
    - yarn publish --no-git-tag-version --non-interactive
  rules:
    # Rule for tags matching semantic version format
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: on_success
      # Prevent running in other cases
    - when: never
  retry:
    max: 2
  allow_failure: false
